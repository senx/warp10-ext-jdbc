//
//   Copyright 2019-2020  SenX S.A.S.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//

{
  'name' 'SQLEXEC'
  'desc'
    <'
The `SQLEXEC` function executes a SQL statement against a JDBC compatible RDBMS and generates Geo Time Series from the resultinf rows.

The JDBC drivers which can be used are those whose `Driver` classes have been added to the Warp 10 configuration using a `jdbc.driver.` prefixed configuration key, *e.g.* for [PostgreSQL](https://www.postgresql.org/) the following declaration should appear:

```
   jdbc.driver.postgres = org.postgresql.Driver
```

with the `.jar` file containing the driver present in the classpath of the Warp 10 instance, typically in the `lib` directory.
    '>
  'sig' [ 
    [ [ 'fields:LIST<STRING>' 'sql:STRING' 'properties:MAP' 'url:STRING' ] [ 'list:LIST' ] ] 
    [ [ 'fields:LIST<STRING>' 'sql:STRING' 'batchValues:LIST' 'properties:MAP' 'url:STRING' ] [ 'list:LIST' ] ]
    [ [ 'converter:MACRO' 'fields:LIST<STRING>' 'sql:STRING' 'properties:MAP' 'url:STRING' ] [ 'list:LIST' ] ] 
    [ [ 'converter:MACRO' 'fields:LIST<STRING>' 'sql:STRING' 'batchValues:LIST' 'properties:MAP' 'url:STRING' ] [ 'list:LIST' ] ]
  ] // Signature
  'params' {
    'converter' 'If provided, this macro will be executed for each row on values of the column interpreted as the timestamp. Useful if the sql type does not have a straightforward conversion into a timestamp.'
    'fields' 'List of columns names, the first one will be interpreted as the timestamp, the others as values, each one leading to a distinct Geo Time Series. All other columns will be interpreted as labels. In case this is NULL, no conversion to GTS is done and the result is either the raw LIST of LIST of result or the list of the number of updates.'
    'sql' 'SQL statement to execute.'
    'properties' 'Map of properties to pass on to the JDBC Driver. For example `user` and `password`.'
    'url' 'JDBC URL of the DB to contact.'
    'batchValues' 'List of Lists of values to be used in the prepared statement.'
    'list' 'List of GTSs, rows or number of updates.'
  }
  'ext' 'io.warp10.script.ext.jdbc.JDBCWarpScriptExtension'
  'conf' [ 'jdbc.driver.*' ]
  'tags' [ 'ext' 'jdbc' ]
  'examples' [
<'
//
// Reading Time Series from TimeScaleDB
// @see https://github.com/timescale/timescaledb-docker
// @see https://github.com/timescale/timescaledb/blob/master/README.md
//
// @see https://jdbc.postgresql.org/
//

// DB URL
'jdbc:postgresql://localhost:5432/'
{
  'user' 'postgres'
  'password' 'foo'
}
// We need to extract the epoch timestamp from the timestamp column
'select 1000000*extract(epoch from time) as ts,humidity,temperature,location from conditions;'
[ 'ts' 'temperature' 'humidity' ]
SQLEXEC
'>
  ]
} 'info' STORE

<%
  !$info INFO
  SAVE 'context' STORE
    'SQLEXEC' EVAL
  $context RESTORE
%>
'macro' STORE
// Unit tests
$macro
